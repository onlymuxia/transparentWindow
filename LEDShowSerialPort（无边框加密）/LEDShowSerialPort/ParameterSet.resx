<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="colorDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABWYQw0XkUVAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKaV2Ahp4
        pzIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAALH4FUFRxBfiPRQSgfE0XBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADW8
        fwQavXOaFmvB+BA85VQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACt8BFQvggL4U3IE/5JJAP+QRgWmgkUVBAAAAAAAAAAAAAAAAAAA
        AAAfsYAEG750oBzBdP8XasT/EELr+gxG41oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArfANYMIMC+jCEAP9TcgT/k0kA/5RJAP+PRAOqbTkCBgAA
        AAAAAAAAH7N7BBy+dKYdwXT/HsF0/xdrxP8QROv/Dkzt+g9T514AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK30EXDCDAvoxhAD/MYQA/1NyBP+TSQD/lUgA/5VJ
        AP+ORAKsZDMHBiO3fAYbvXSoHcF0/x3BdP8ewXX/F2rD/w9F7P8NUO//DFrx+g1i62IAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACt+A2AwgwL8MYMB/zGEAP8xhAD/U3IE/5NJ
        AP+VSQD/lUgA/5RJAP+NSgmuHL91rh3BdP8dwXT/HsJ1/x3Bdf8WasP/D0js/w1U7/8LYfP/C2v2/Axz
        72gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArfQRkMIMC/DGDAf8xhAD/MYQA/zGE
        AP9TcgT/k0kA/5VJAP+USAD/kU0F/0ChV/8dwXT/HsF0/x7Cdf8ewnX/HsF0/xZqw/8PSu3/DFry/wpp
        9v8JdPn/CH35/AyF824AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACD0EgAKn4DaDCDAfwwhAD/MYQA/zGE
        AP8xhAD/MYQA/1NyBP+TSQD/lUgA/5JNBv8+o1j/HcB0/x7BdP8ewnX/HsJ1/x7Cdf8ewXT/FmrD/w5P
        7/8KY/T/CXP5/wd//P8Gif3/BpH8/wmX+HBDzfQAAAAAAAAAAAAAAAAAAAAAACt+A2wwgwH8MYQA/zGE
        AP8xhAD/MYQA/zGEAP8xhAD/U3IE/5NJAP+QTgb/PqRZ/x3AdP8dwXT/HsJ1/x7Cdf8ewnX/HsJ1/x7B
        dP8WbMP/DFjx/wly+f8HhPz/BpD+/wSY/v8Env7/BaP9/wqn+Hbc/N0AAAAAACBJKQArfgRuMIMB/zGD
        AP8xhAD/MYQA/zGEAP8xhAD/MYQA/zGEAP9TcgT/jU8H/zqlW/8dwHT/HcF0/x7Cdf8ewnX/HsJ1/x7C
        df8ewnX/HsF0/xZsxP8Jb/f/BY39/wSc/v8Cpf7/Aqr+/wGu/v8BsP7/BLL9/wi0+Xhs4eQAK3sKbi+C
        BPgvggP4L4IC+C+CAvgvggL4L4IC+C+CAvgvggL4MIID+E14DPg7plz/H8Bz/x/Ac/8fwHP/H8Bz/x/A
        c/8fwHP/H8Bz/x/Ac/8gwHP/F3rF/wei/f8Gsf7/Bbb+/wW5/v8Eu/7/BLv+/wS8/v8Fvf7/Br79/xC+
        +YJmlosEZp2NBGaeiwRnn4wEZ5+MBGefjARnn4wEZ5+MBGefjAQqrXkSKKZGxjKDAf8xgwH/MoMB/zKD
        Af8ygwH/MoMB/zKDAf8ygwH/MoMB/0iRHP9BYK7/E1Tq/xNd7v8TYO7/E2Lu/xJi7v8TZO7/E2Tv/xNl
        7v8SZe7/FGXoegAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGrd2EBq/c8QlrVD/MYMA/zGE
        AP8xhAD/MYQA/zGEAP8xhAD/MYQA/zCDAP9Ikxv/j8Fk/0RZtP8UM+f/E0Xr/xNP7f8SVO7/Elfv/xJZ
        8P8SW/H/EVvx/xJb7HYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABO+cBAbv3PIHcF0/yWt
        UP8xgwD/MYQA/zGEAP8xhAD/MYQA/zGEAP8xgwD/SpQd/4/BZf+SxGj/RFm0/xUl4/8UNef/FEDq/xNH
        7P8TTO3/ElDt/xJT7f8TVuh0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATtnYQGr9zyh3B
        dP8ewXT/Ja1Q/zGDAP8xhAD/MYQA/zGEAP8xhAD/MYQA/0uVHv+QwWX/k8No/5LEZ/9EWLT/Fh/i/xUs
        5f8UNuj/FD7p/xRD6/8TSOz8EkvlbI6y2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF7V0FBu/
        dMwewXT/HsJ1/x7BdP8lrVD/MYMA/zGEAP8xhAD/MYQA/zCEAP9MlSH/kMFm/5PEaP+TxGj/ksRn/0RY
        tP8WHeD/FSbk/xQv5v8VN+j/Ezzo/BI942gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABez
        chYcv3POHsF1/x7Cdf8ewnX/HsF0/yWtUP8xgwD/MYQA/zGEAP8xgwD/LoEFsI3AY56Tw2j/k8No/5PE
        aP+SxGf/RFi0/xYc3v8WIuP/FSrl/xQx5fwSNN5mAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAVt3MWHL9z0B7BdP8ewnX/HsJ1/x7Cdf8ewXT/Ja1Q/zGDAP8xhAD/MIMA/yx/A6olcw8GgrNlApLC
        Zp6Uw2n/k8No/5LEZ/9FWbX/Fh3e/xUg4v8VJuP8FCzcZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAHLVzFhy/c9IdwXT/HsJ1/x7Cdf8ewnX/HsJ1/x7BdP8lrVD/MYMA/zCEAP8ugQSoI20VBAAA
        AAAAAAAAisdaApHCZ5iTw2j/k8Rn/0RZtf8WHd7/FR3h+hcj2V4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABu4chgbv3TUHsJ1/x3Cdf8ewnX/HsJ1/x7Cdf8ewnX/HsJ1/yWtUP8xgwH/L4IGpix+
        GQQAAAAAAAAAAAAAAAAAAAAAkMZmApLCZ5STw2j/RVi1/xYc3PoUG9VaAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAct3MaHL9z1h7Bdf8ewXX/HsF1/x7Bdf8ewXX/HsF1/x7Bdf8ewXX/JK1R/y+B
        BaA/ogwEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfq1dApHBZ4xFWrP6ExjVVgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACPCe2Aiw3qGIsR6hiLEeoYixHqGIsR6hiLEeoYixHqGIsR6hiLD
        eoYms2BuPJIjAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAga5cAklkoi4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////z/P//4fh//8DwP/+AYB//AAAP/gA
        AB/wAAAP4AAAB8AAAAOAAAAA/8AAAf+AAAP/AAAH/gAAD/wAAB/4AAA/8AGAf+ADwP/AB+H/gA/z/4A/
        //////////////////////////////////8=
</value>
  </data>
</root>